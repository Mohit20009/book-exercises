# Exercise 3. Bill Calculator
# ============================
#
# Scenario - suppose you went to tea shop today and you bought a cup of tea and 2 scones.
# There is a promotion today where if you buy a cup of tea and 2 scones you get 10% off your purchase.
# Sales tax in WA is 6.5%
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) + discount
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + sales_tax
# Expected result
# total_after_tax
# 9.11
#
# END #
paste("Hello", "The", "World", sep= "")
paste("Hello", "The", "World", sep= "*")
paste("Hello", "The", "World", collapse = "")
paste(c("a","b","c", "d"), c("e","f"), sep ="+", collapse = "--")
person <- list(first_name = "Ada", last_name = "Gomez", job = "Programmer", salary = 77000, in_union = TRUE)
person["first_name"]
class(person["first_name"])
person[["first_name"]]
class(person[["first_name"]])
which_name <- "last_name"
person$which_name
person[[which_name]]
as.Date(18289, origin = "1970-01-01")
# ==========================================
#title: "INFO 201 Lab 3 Debugging Exercise"
#date: "1/21/2020"
# ==========================================
#
# In groups of three, you will now work on the following exercises where you will practice:
#
# * Identifying whether an error is a syntax, semantic or logical error
# * Analyze an error message and be able to interpret it
# * Describe the steps of searching for solutions to errors
#
# =====================
# Exercise 1. Vectors
# =====================
#
# 1.1 Sharks -------------------------------------------------------
#
#  Use the combine (`c()`) function to create a vector for different types of shark
sharks <- c("Hammerhead", "Great White", "Thresher")
# Scientists discovered a new deep-sea shark called a Goblin shark you want to add this to your vector of sharks
# Use the `c()` function to combine the `sharks` vector and the newly discovered "Goblin" shark
updated_sharks <- c(sharks,"Goblin")
print(updated_sharks)
# Results expected
# [1] "Hammerhead" "Great White" "Thresher" "Goblin"
#
## 1.2 Earthquakes ----------------------------------------------
#
# The following vector contains earthquake magnitudes for large earthquakes
# in the seattle area since the creation of the Richter Scale
earthquakes <- c(6.8, 5.3, 5.0, 7.3, 7.1, 6.3, 5.5)
# filter for earthquakes that were larger than 6.5
earthquakes[ > 6.5]
# Results expected
# [1] 6.8 7.3 7.1
#
## 1.3 Endangered animals ---------------------------------------
#
# Create a vector of endangered marine animals
endangered <- c("Blue Whale", "Bluefin Tuna", "Galapago Penguin", "Florida Manatee", "Hawksbill Turtle", "Sea Otter")
# Vector of booleans (to filter the 'endangered' vector) where TRUE means that the endangered species is a mammal
filter <- c(TRUE FALSE FALSE TRUE FALSE, TRUE)
# Extract element in an index that is TRUE
print(endangered(filter))
# Expected results:
#[1] "Blue Whale"      "Florida Manatee" "Sea Otter"
#
# ===================
# Exercise 2. Lists
# ===================
#
## 2.1 More Sharks  -----------------------------------------------
# Lets return to our sharks vector from earlier. We can create a list called shark_length that contains
# max length in feet of different types of sharks. The name of sharks are used as tags.
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
# Access the last element in the list and return a vector
shark_length[-4]
# Confirm that you returned a vector and not a list
is.list(shark_length)
#Expected results
#[1] 12.6
#[1] FALSE
#
## 2.2 Lab grades ----------------------------------------------
# Here is a list of lab grades for imaginary lab section LL
lab_grades <- list(hwk_scores = 5:10,
student_year = c(1, 4, 4, 2, 3, 2),
lab = "LL")
# Add a new item is_participant = "Yes" to the list lab_grades
lab_grades[[is_participant]] <- "Yes"
# ============================
# Exercise 3. Bill Calculator
# ============================
#
# Scenario - suppose you went to tea shop today and you bought a cup of tea and 2 scones.
# There is a promotion today where if you buy a cup of tea and 2 scones you get 10% off your purchase.
# Sales tax in WA is 6.5%
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) + discount
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + sales_tax
# Expected result
# total_after_tax
# 9.11
#
# END #
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
# Access the last element in the list and return a vector
shark_length[-4]
# Confirm that you returned a vector and not a list
is.list(shark_length)
#Expected results
#[1] 12.6
#[1] FALSE
#
# ===================
# Exercise 2. Lists
# ===================
#
## 2.1 More Sharks  -----------------------------------------------
# Lets return to our sharks vector from earlier. We can create a list called shark_length that contains
# max length in feet of different types of sharks. The name of sharks are used as tags.
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
# Access the last element in the list and return a vector
shark_length[4]
# Confirm that you returned a vector and not a list
is.list(shark_length)
#Expected results
#[1] 12.6
#[1] FALSE
c(shark_length[4])
c(shark_length[4])
is.vector(shark_length)
is.list(shark_length)
is.list(last_element)
last_element <- c(shark_length[4])
is.list(last_element)
last_element <- shark_length[[4]]
is.list(last_element)
print(last_element)
Scenario - suppose you went to tea shop today and you bought a cup of tea and 2 scones.
# There is a promotion today where if you buy a cup of tea and 2 scones you get 10% off your purchase.
# Sales tax in WA is 6.5%
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) + discount
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + sales_tax
# Expected result
# total_after_tax
# 9.11
#
# END #
# Scenario suppose you went to tea shop today and you bought a cup of tea and 2 scones.
# There is a promotion today where if you buy a cup of tea and 2 scones you get 10% off your purchase.
# Sales tax in WA is 6.5%
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) + discount
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + sales_tax
# Expected result
# total_after_tax
# 9.11
#
# END #
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) + discount
print(total_with_discount)
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) - discount*((tea + 2*scone))
print(total_with_discount)
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + sales_tax*total_with_discount
print(total_after_tax)
print(round(total_after_tax))
print(round(total_after_tax), 2)
?round()
print(round(total_after_tax), digits =2)
print(round(total_after_tax), digits =3)
print(round(total_after_tax, digits =3))
print(round(total_after_tax, digits =2))
# Combine the vectors into a data frame
# Note the names of the variables become the names of the columns!
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
# Data Frames are two dimensional collections of values, organized into rows and columns.
# A vector of names
name <- c("Ada", "Bob", "Chris", "Diya", "Emma")
# A vector of heights
height <- c(64, 74, 69, 69, 71)
# A vector of weights
weight <- c(135, 156, 139, 144, 152)
# Combine the vectors into a data frame
# Note the names of the variables become the names of the columns!
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
# Combine the vectors into a data frame
# Note the names of the variables become the names of the columns!
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
# A vector of names
name <- c("Ada", "Bob", "Chris", "Diya", "Emma")
# A vector of heights
height <- c(64, 74, 69, 69, 71)
# A vector of weights
weight <- c(135, 156, 139, 144, 152)
# Combine the vectors into a data frame
# Note the names of the variables become the names of the columns!
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
print(people)
View(people)
columns(people) <- c("first_name", "height_inches", "weight_lbs")
colnames(people) <- c("first_name", "height_inches", "weight_lbs")
print(people)
# Extract element in second row and column named 'height'
people[2, "height"]
# Extract the second row and all columns)
people[2, ] # note the comma, indicating all columns
# Extract the "height" column as a vector
people[, "height"] # note the comma, indicating all rows
# Get the second through fourth rows
people[2:4, ] # note the comma, indicating all columns
# Extract the "height" column as a vector
people[, "height_inches"] # note the comma, indicating all rows
people[people$name == "Ada", "height_inches"]
# Data Frames are two dimensional collections of values, organized into rows and columns.
# A vector of names
name <- c("Ada", "Bob", "Chris", "Diya", "Emma")
# A vector of heights
height <- c(64, 74, 69, 69, 71)
# A vector of weights
weight <- c(135, 156, 139, 144, 152)
# Combine the vectors into a data frame
# Note the names of the variables become the names of the columns!
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
colnames(people) <- c("first_name", "height_inches", "weight_lbs")
print(people)
View(people)
# Extract element in second row and column named 'height'
people[2, "height"]
# Extract the second row and all columns)
people[2, ] # note the comma, indicating all columns
# Extract the "height" column as a vector
people[, "height_inches"] # note the comma, indicating all rows
# Get the second through fourth rows
people[2:4, ] # note the comma, indicating all columns
people[people$name == "Ada", "height_inches"]
# Data Frames are two dimensional collections of values, organized into rows and columns.
# A vector of names
name <- c("Ada", "Bob", "Chris", "Diya", "Emma")
# A vector of heights
height <- c(64, 74, 69, 69, 71)
# A vector of weights
weight <- c(135, 156, 139, 144, 152)
# Combine the vectors into a data frame
# Note the names of the variables become the names of the columns!
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
colnames(people) <- c("first_name", "height_inches", "weight_lbs")
print(people)
View(people)
people[people$name == "Ada", "height_inches"]
people[people$name == "Ada", "height"]
people[people$name == "Ada", "height_inches"]
# Combine the vectors into a data frame
# Note the names of the variables become the names of the columns!
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
people[people$name == "Ada", "height"]
people[people$name == "Ada", "height_inches"]
colnames(people) <- c("first_name", "height_inches", "weight_lbs")
people[people$name == "Ada", "height_inches"]
people[people$name == "Ada", "height"]
# Combine the vectors into a data frame
# Note the names of the variables become the names of the columns!
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
people[people$name == "Ada", "height"]
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
print(employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments)
View(salaries)
salaries$salaries_2018 = salaries$salaries_2017 - salaries$adjustments
View(salaries)
salaries$salaries_2018 = salaries$salaries_2017 + salaries$adjustments
View(salaries)
salaries$raise = salaries[salaries$adjustments > 0]
salaries$raise = salaries$adjustments > 0
View(salaries)
# What was the 2018 salary of Employee 57
salaries[57, "salaries_2018"]
# How many employees got a raise?
?count
# How many employees got a raise?
?count()
# How many employees got a raise?
ncol(salaries$adjustments == T)
# How many employees got a raise?
ncol(salaries$raise == T)
# How many employees got a raise?
ncol(salaries(salaries$raise == T))
# How many employees got a raise?
ncol(salaries[salaries$raise == T])
# How many employees got a raise?
ncol(salaries[salaries$raise == T])
salaries[salaries$raise == T]
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
print(employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 = salaries$salaries_2017 + salaries$adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise = salaries$adjustments > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
salaries[57, "salaries_2018"]
# How many employees got a raise?
ncol(salaries[salaries$raise == T])
# What was the dollar value of the highest raise?
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
# How many employees got a raise?
my <- salaries[salaries$raise == T]
# How many employees got a raise?
my <- salaries[salaries$raise == T, raise]
# How many employees got a raise?
my <- salaries[salaries$raise == T, "raise"]
# How many employees got a raise?
ncol(salaries[salaries$raise == T, "raise"])
# How many employees got a raise?
my <- salaries[salaries$raise == T, "raise"]
View(my)
ncol(my)
nrow(my)
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57", "salaries_2018"]
# How many employees got a raise?
nrow(salaries[salaries$raise == T,])
# How many employees got a raise?
nrow(salaries[salaries$raise == T])
# How many employees got a raise?
nrow(salaries[salaries$raise == T,])
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max()]
max(salaries$adjustments)
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments)]
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments),]
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "adjusment"]
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "adjusments"]
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "adjustments"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "name"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employee"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = F)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# What was the largest decrease in salaries between the two years?
salaries[salaries$decrease == max(abs(salaries$salaries_2018 -salaries_2017)), ]
# What was the largest decrease in salaries between the two years?
salaries$decrease = abs(salaries$salaries_2018 -salaries_2017))
# What was the largest decrease in salaries between the two years?
salaries$decrease = abs(salaries$salaries_2018 -salaries_2017)
# For people who did not get a raise, how much money did they lose on average?
paycut <- salaries[salaries$raise == F,]
mean(paycut$adjusments)
mean(paycut$adjustments)
View(paycut)
# For people who did not get a raise, how much money did they lose on average?
paycut <- salaries[salaries$raise == F,]
View(paycut)
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
print(employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = F)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 = salaries$salaries_2017 + salaries$adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise = salaries$adjustments > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57", "salaries_2018"]
# How many employees got a raise?
nrow(salaries[salaries$raise == T,])
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "adjustments"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# What was the largest decrease in salaries between the two years?
#salaries$decrease = abs(salaries$salaries_2018 -salaries_2017)
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
paycut <- salaries[salaries$raise == F,]
View(paycut)
mean(paycut$adjustments)
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
# For people who did not get a raise, how much money did they lose on average?
paycut <-
mean(salaries[salaries$raise == F, "adjustments"])
# For people who did not get a raise, how much money did they lose on average?
mean(salaries[salaries$raise == F, "adjustments"])
# What was the largest decrease in salaries between the two years?
salaries[salaries$adjustments == min(salaries$adjustments), "employees"]
# What was the largest decrease in salaries between the two years?
salaries[salaries$adjustments == min(salaries$adjustments), "adjustments"]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$adjustments == min(salaries$adjustments), "employees"]
# What was the average salary change?
mean(salaries$adjustments)
gwd()
gwd
getwd
getwd()
setwd("~/Desktop/book-exercises/chapter-10-exercises/exercise-2")
# Write a .csv file of your salary data to your working directory
write.csv(salaries)
?write.csv
# Write a .csv file of your salary data to your working directory
write.csv(x = df, file = "salaries.csv", row.names = FALSE)
# Write a .csv file of your salary data to your working directory
write.csv(x = salaries, file = "salaries.csv", row.names = FALSE)
