print(round(total_after_tax, digits =3))
print(round(total_after_tax, digits =2))
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufactures <- vehicles$make
?unique
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
no_manu <- nrow(unique(manufactures))
print(no_manu)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
no_manu <- length(unique(manufactures))
print(no_manu)
# Filter the data set for vehicles manufactured in 1997
vehilces_1997<-vehicles[vehicles$year==1997,]
View(vehilces_1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
vehilces_1997<- order(vehilces_1997$hwy)
View(vehilces_1997)
# Filter the data set for vehicles manufactured in 1997
vehilces_1997<-vehicles[vehicles$year==1997,]
vehicles_1997$average <-(vehilces_1997$hwy +vehilces_1997$cty)/2
vehilces_1997$average <-(vehilces_1997$hwy +vehilces_1997$cty)/2
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2wheel<- vehicles[vehicles$drive == "2-Wheel Drive",]
efficiant_2wheel <- vehicles_2wheel[vehicles_2wheel$cty>20,]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
vehilces_1997<- order(vehilces_1997[vehiclesvehilces_1997$hwy,])
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
vehilces_1997<- order(vehilces_1997[vehilces_1997$hwy,])
View(vehilces_1997)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehilces_1997$average <-(vehilces_1997$hwy +vehilces_1997$cty)/2
# Filter the data set for vehicles manufactured in 1997
vehilces_1997<-vehicles[vehicles$year==1997,]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehilces_1997$average <-(vehilces_1997$hwy +vehilces_1997$cty)/2
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2wheel<- vehicles[vehicles$drive == "2-Wheel Drive",]
efficiant_2wheel <- vehicles_2wheel[vehicles_2wheel$cty>20,]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
vehicles_2wheel[vehicles_2wheel$hwy==min(vehicles_2wheel$hwy),"id"]
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(dplyr)
install.packages("ggplot2")
library("ggplot2")
midwest
ggplot(data = midwest)
ggplot(data = midwest) +
geom_point(mapping =  aes(x = percollege, y = peradultpoverty))
ggplot(data = midwest) +
geom_point(mapping =  aes(x = percollege, y = percadultpoverty))
# Bar chart of population by state
ggplot(data = midwest) +
geom_col(mapping = aes(x = state, y = poptotal))
# A hexagonal aggregation (count) of education and poverty
ggplot(data = midwest) +
geom_hex(mapping = aes(x = percollege, y = percadultpoverty))
# A plot with both points and a smoothed line, sharing aesthetic mappings
ggplot(data = midwest, mapping = aes(x = percollege, y = percadultpoverty)) +
geom_point() + # uses the default x and y mappings
geom_smooth() + # uses the default x and y mappings
geom_point(mapping = aes(y = percchildbelowpovert)) # uses own y mapping
# A hexagonal aggregation (count) of education and poverty
ggplot(data = midwest) +
geom_hex(mapping = aes(x = percollege, y = percadultpoverty))
install.packages('hexbin')
# A hexagonal aggregation (count) of education and poverty
ggplot(data = midwest) +
geom_hex(mapping = aes(x = percollege, y = percadultpoverty))
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library('ggplot2')
library('dplyr')
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamons_sample <- sample(diamonds,1000)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamons_sample <- sample_n(diamonds,1000)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamons_sample)+
geom_point(mapping = aes(x = carat, y= price))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamons_sample)+
geom_point(mapping = aes(x = carat, y= price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds)+
geom_point(mapping = aes(x = carat, y= price, color = clarity))
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds,1000)
View(diamons_sample)
# Exercise 1: ggplot2 basics
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library('ggplot2')
library('dplyr')
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds,1000)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
#Expected a grey canvas
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample)+
geom_point(mapping = aes(x = carat, y= price))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample)+
geom_point(mapping = aes(x = carat, y= price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds)+
geom_point(mapping = aes(x = carat, y= price, color = clarity))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample)+
geom_point(mapping = aes(x = carat, y= price, color = clarity))
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
# Try coloring the above plot based on the diamond's price!
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
# That's kind of messy. Try using `smooth` geometry instead.
# Draw a plot with column geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis and `price` to the y-axis. Note that by default, column geometry
# will us the "sum" of all of the y-values, so that the chart is actually of the
# TOTAL value of all of the diamonds of that cut!
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
## Bonus
# Draw a column chart of average diamond prices by clarity, and include
# "error bars" marking the standard error of each measurement.
#
# You can calculate standard error as the _standard deviation_ divided by the
# square root of the number of measurements (prices)
# Start by creating a data frame `clarity_summary` that includes summarized data
# for each clarity group. Your summary data should include the mean price and the
# standard error of the price.
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample)+
geom_point(mapping = aes(x = carat, y= price), , color = "blue")
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample)+
geom_point(mapping = aes(x = carat, y= price), , color = "blue", alpha = .3)
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(data = diamonds_sample)+
geom_point(mapping = aes(x = carat, y= price, shape = cut))
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample)+
geom_point(mapping = aes(x = carat, y= cut, size = price))
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds_sample)+
geom_point(mapping = aes(x = carat, y= cut, size = price, color = price))
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(data = diamonds_sample)+
geom_line(mapping = aes(x = carat, y= prize, color = cut))
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(data = diamonds_sample)+
geom_line(mapping = aes(x = carat, y= price, color = cut))
ggplot(data = diamonds_sample)+
geom_smooth(mapping = aes(x = carat, y= price, color = cut))
# Draw a plot with column geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis and `price` to the y-axis. Note that by default, column geometry
# will us the "sum" of all of the y-values, so that the chart is actually of the
# TOTAL value of all of the diamonds of that cut!
ggplot(data = diamonds_sample)+
geom_col(mapping = aes(x = cut, y= price))
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
ggplot(data = diamonds_sample)+
geom_col(mapping = aes(x = cut, y= price, fill = clarity))
colnames(diamonds)
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample)+
geom_point(mapping = aes(x = carat, y= price), alpha =0.3) +
geom_smooth(mapping = aes(x = carat, y= price, color = cut))
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds_sample)+
geom_bar(mapping = aes(x = cut, y = price, fill = clarity))
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds_sample)+
geom_bar(mapping = aes(x = price, y = cut, fill = clarity))
# Install and load the `ggplot2` package
#install.packages('ggplot2')
library("ggplot2")
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds_sample)+
geom_bar(mapping = aes(x = price, y = cut, fill = clarity))
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds_sample)+
geom_col(mapping = aes(x = cut, y = price, fill = clarity))
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(data = diamonds_sample)+
geom_col(mapping = aes(x = cut, y = price, fill = price))
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(data = diamonds_sample)+
geom_col(mapping = aes(x = cut, y = price, fill = price), position = "fill")
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds_sample)+
geom_col(mapping = aes(x = price, y = cut, fill = clarity))
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds_sample)+
geom_col(mapping = aes(x = price, y = cut, fill = clarity))
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds_sample)+
geom_col(mapping = aes(x = cut, y = price, fill = clarity))
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(data = diamonds_sample)+
geom_col(mapping = aes(x = price, y = cut, fill = price), position = "fill")
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(data = diamonds_sample)+
geom_col(mapping = aes(x = cut, y = price, fill = price), position = "fill")
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(data = diamonds_sample)+
geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = "fill")
# Draw the same chart again, but with each element positioned to "dodge" each other
ggplot(data = diamonds_sample)+
geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = "dodge")
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(data = diamonds_sample)+
geom_boxplot(mapping = aes(x = color, y = price))
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(data = diamonds_sample)+
geom_boxplot(mapping = aes(x = color, y = price))+
scale_y_log10()
# For another version, draw the same plot but with `violin` geometry instead of
# `boxplot` geometry!
# How does the logarithmic scale change the data presentation?
ggplot(data = diamonds_sample)+
geom_violin(mapping = aes(x = color, y = price))+
scale_y_log10()
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(data = diamonds_sample)+
geom_bin2d(mapping = aes(x = carat, y = price))
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(data = diamonds_sample)+
geom_bin2d(mapping = aes(x = carat, y = price))+
scale_x_log10()+
scale_y_log10()
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(data = diamonds_sample)+
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(data = diamonds_sample)+
geom_point(mapping = aes(x = carat, y = price, color = clarity))+
scale_color_brewer(palette = "Purples")
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(data = diamonds_sample)+
geom_point(mapping = aes(x = carat, y = price, color = clarity))+
scale_color_brewer(palette = "Purples", direction = -1)
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds_sample)+
geom_point(mapping = aes(x = carat, y = price, color = clarity))+
facet_wrap(-color)
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds_sample)+
geom_point(mapping = aes(x = carat, y = price, color = clarity))+
facet_wrap(~color)
# load relevant libraries
library("httr")
library("jsonlite")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
key_param <- list("api-key"= nyt_key)
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Home Alone"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri, endpoint)
query_param <- list("api-key" = nyt_key, "movie_name"= movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri,query = query_param)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
# What kind of data structure did this produce? A data frame? A list?
is.data.frame(data)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
# Flatten the movie reviews content into a data structure called `reviews`
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
# Create a list of the three pieces of information from above.
# Print out the list.
setwd("~/Desktop/book-exercises/chapter-18-exercises/exercise-1")
key_param <- list("api-key"= nyt_key)
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
key_param <- list("api-key"= nyt_key)
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Home Alone"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri, endpoint)
query_param <- list("api-key" = nyt_key, "movie_name"= movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri,query = query_param)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
# What kind of data structure did this produce? A data frame? A list?
is.data.frame(data)
is.list(data)
View(data)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
df <- data$results
View(df)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
?names()
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
names(data)
?flatten
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(data$results)
View(reviews)
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
headline <- reviews$headline
short_summary <- reviews$summary_short
link <- reviews$link.url
info <- list ("Headline" = headline, "Summary"= short_summary, "Link" = link)
print(info)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library('ggplot2')
library('dplyr')
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample)+
geom_point(mapping = aes(x = carat, y= price), alpha =0.3) +
geom_smooth(mapping = aes(x = carat, y= price, color = cut))
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds,1000)
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample)+
geom_point(mapping = aes(x = carat, y= price), alpha =0.3) +
geom_smooth(mapping = aes(x = carat, y= price, color = cut))
# Use the "jitter" position adjustment to keep the points from all overlapping!
# (This works a little better with a sample of diamond data, such as from the
# previous exercise).
ggplot(data = diamonds_sample)+
geom_point(mapping = aes(x = cut, y = price), position = "jitter")
# Use the "jitter" position adjustment to keep the points from all overlapping!
# (This works a little better with a sample of diamond data, such as from the
# previous exercise).
ggplot(data = diamonds_sample)+
geom_point(mapping = aes(x = cut, y = price, fill = clarity), position = "jitter")
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(data = diamonds_sample)+
geom_boxplot(mapping = aes(x = color, y = price))
?diamonds
# Use the `ggsave()` function to save the current (recent) plot to disk.
# Name the output file "my-plot.png".
# Make sure you've set the working directory!!
?ggsave
setwd("~/Desktop/book-exercises/chapter-16-exercises/exercise-2")
ggsave("my-plot.png", last_plot())
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
fggplot(data = diamonds_sample)+
geom_point(mapping = aes(x = carat, y = price, color = clarity))+
facet_wrap(~color)
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds_sample)+
geom_point(mapping = aes(x = carat, y = price, color = clarity))+
facet_wrap(~color)
ggsave("my-plot.png", last_plot())
